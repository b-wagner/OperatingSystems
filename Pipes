/**
*	Pipe Program
*	Using the Liberty Shell Linux Shell
*	By Ben Wagner
*	Modified November 15, 2015
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdbool.h>

int CMD_MAX = 80; //Maximum amount of commands
char PROMPT[] = "LIBERTY SHELL$ "; //The prompt

char *PATH; //NOTE - any other pointer name was giving me a Segmentation Fault
char **listOfDirectories; //Double pointer for directories

//Functions used in this program
char* findPATH(char **);
char** getDirectories();
char** getArgs(char line[]);
void execCmd(char**);
char** getPipeCmd(char *line);
void execPipeCmd(char**, int);
int getNumCommands(char *line);

//Main function initiates shell and prompts for user input
int main(int argc, char **argv, char **envp)
{
	//Get info for initial display
	PATH = findPATH(envp);
	listOfDirectories = getDirectories();

	char line[CMD_MAX]; //Defines how many inputs the line can have
	char **argument;
	printf("%s", PROMPT); //Prints the initial prompt

	int processID;
	int numCommands;

	//Main loop of Liberty Shell
	while(fgets(line, CMD_MAX, stdin) != NULL)
	{
		bool pipe = false;
		for(int i = 0; i < sizeof(line); i++)
		{
			if(line[i] == '|')
			{
				pipe = true;
				break;
			}
		}
		if(!pipe)
		{
			argument = getArgs(line);
			processID = fork(); //Forks the process

			if(processID == -1)
			{
				puts("Error in forking process.\n");
			}
			else if(processID == 0)
			{
				execCmd(argument);
			}
			else
			{
				wait(&processID);
			}
		}
		else
		{
			argument = getPipeCmd(line);
			processID = fork();
			if(processID == -1)
			{
				puts("Error in forking process.\n");
			}
			else if(processID == 0)
			{
				numCommands = getNumCommands(line);
				execPipeCmd(argument, numCommands);
			}
			else
			{
				wait(&processID);
			}
		}
				
		printf("%s", PROMPT);
	}	

	free(listOfDirectories);
	free(argument);
	return 0;
}

//Gets the numbered of commands entered. Used in multipiping
int getNumCommands(char *line)
{
	int numCmds = 1;
	int lineSize = strlen(line) + 1;
	for(int i = 0; i < lineSize; i++)
	{
		if(line[i] == '|')
		{
			numCmds++;
		}
	}

	return numCmds;
}

//Gets additional arguments entered by the user
char** getArgs(char line[])
{
	char **args;
	
	int lineLength = strlen(line) + 1;
	int numberOfArguments = 1;

	for(int i = 0; i < lineLength; i++)
	{
		if(line[i] == ' ' || line[i] == '\0')
		{
			numberOfArguments++;
		}
	}
	
	args = malloc(numberOfArguments * sizeof(char*));

	int charCount = 0, arrayCount = 0;
	for(int i = 0; i < lineLength; i++)
	{
		if(line[i] == ' ' || line[i] == '\0')
		{
			charCount++;
			args[arrayCount] = malloc(charCount * sizeof(char*));
			arrayCount++;
			charCount = 0;
		}
		else if(line[i] == '\n')
		{
			continue;
		}
		else
		{
			charCount++;
		}
	}

	int stringDex = 0, arrayDex = 0;
	for(int i = 0; i < lineLength; i++)
	{
		if(line[i] == ' ' || line[i] == '\0')
		{
			stringDex++;
			args[arrayDex][stringDex] = '\0';
			arrayDex++;
			stringDex = 0;
		}
		else if(line[i] == '\n')
		{
			continue;
		}
		else
		{
			args[arrayDex][stringDex] = line[i];
			stringDex++;
		}
	}
	
	return args;
}

char* findPATH(char **envp)
{
	char test[] = "****";
	int count = 0;

	while(envp[count] != NULL)
	{
		for(int i = 0; i < 4; i++)
		{
			test[i] = envp[count][i];
		}
		if(strcmp(test, "PATH") == 0)
		{
			break;
		}
		count++;
	}
	return envp[count];
}

//This function finds the path of the entered command
char** getDirectories()
{
	char *pPATH = PATH;
	char **parsedPATH;

	pPATH += 5;

	int directoriesCounter = 0;
	int lengthOfPATH = strlen(pPATH) + 1;

	for(int i = 0; i < lengthOfPATH; i++)
	{
		if(pPATH[i] == ':' || pPATH[i] == '\0')
		{
			directoriesCounter++;
		}
	}
	directoriesCounter++;

	parsedPATH = malloc(directoriesCounter * sizeof(char*));

	int charCounter = 0, arrayCounter = 0;
	for(int i = 0; i < lengthOfPATH; i++)
	{
		if(pPATH[i] == ':' || pPATH[i] == '\0')
		{
			charCounter++;
			parsedPATH[arrayCounter] = malloc(charCounter);

			charCounter = 0;
			arrayCounter++;
		}
		else
		{
			charCounter++;
		}
	}

	int stringDex = 0, arrayDex = 0;
	for(int i = 0; i < lengthOfPATH; i++)
	{
		if(pPATH[i] == ':' || pPATH[i] == '\0')
		{
			stringDex++;
			parsedPATH[arrayDex][stringDex] = '\0';

			arrayDex++;
			stringDex = 0;
		}
		else
		{
			parsedPATH[arrayDex][stringDex] = pPATH[i];
			stringDex++;
		}
	}

	parsedPATH[directoriesCounter] = NULL;
	return parsedPATH;
}

//Executes entered commands
void execCmd(char** arguments)
{
	char searchDirectory[200];

	int count = 0;
	while(listOfDirectories[count] != NULL)
	{
		strcpy(searchDirectory, listOfDirectories[count]);
		strcat(searchDirectory, "/");
		strcat(searchDirectory, arguments[0]);
		printf("Checking %s\n", searchDirectory);

		if(access(searchDirectory, F_OK) != -1)
		{
			puts("Command Found");
			execv(searchDirectory, arguments);
			break;
		}
		
		count++;
	}
}
//Gets the piped command
char** getPipeCmd(char *line)
{
	int numCmds = getNumCommands(line);
	int lineSize = strlen(line) + 1;

	char **cmds = malloc(numCmds * (sizeof(char*)));
	int cmdCount = 0, argCount = 0;
	for(int a = 0; a < lineSize; a++)
	{
		if(line[a] == '|' || line[a] == '\0')
		{
			cmdCount++;
			cmds[argCount] = malloc(cmdCount * sizeof(char*));
			cmdCount = 0;
			argCount++;
		}
		else if(line[a] == '\n')
		{
			continue;
		}
		else
		{
			cmdCount++;
		}
	}
	cmdCount = 0, argCount = 0;
	for(int b = 0; b < lineSize; b++)
	{
		if(line[b] == '|' || line[b] == '\0')
		{
			cmdCount++;
			cmds[argCount][cmdCount] = '\0';
			cmdCount = 0;
			argCount++;
		}
		else if(line[b] == '\n')
		{
			continue;
		}
		else
		{
			cmds[argCount][cmdCount] = line[b];
			cmdCount++;
		}
	}

	return cmds;
}
//Mainly handles order of execution of piped commands.
void execPipeCmd(char** args, int numPipes)
{
	char** separateArgs; //Helps divide multiple arguments up in multipiping

	for(int i = 0; i < numPipes; i++)
	{
		separateArgs[i] = getArgs(args[i]);
	}
	//char** firstArgs = getArgs(args[0]);
	//char** secondArgs = getArgs(args[1]);

	int pipefd[numPipes];
	pipe(pipefd);

	int p_id = fork();
	
	if(p_id == -1)
		puts("Error in the forking process. \n");
	//Actual piping done here.
	else if(p_id == 0)
	{
		//Multipiping is supposed to occur here
		for(int i = 1; i < numPipes; i+=2)
		{
			close(STDIN_FILENO);
			close(pipefd[i]);
			dup2(pipefd[i-1], STDIN_FILENO);
			execCmd(separateArgs[i]);
		}
	}
	//Piping also done here
	else
	{
		wait(&p_id);
		//Multipiping also supposed to occur here
		for(int i = 0; i < numPipes; i+=2)
		{
			close(STDOUT_FILENO);
			close(pipefd[i]);
			dup2(pipefd[i+1], STDOUT_FILENO);
			execCmd(separateArgs[i]);
		}		
	}

		
	//	close(pipefd[1]);
	//	dup2(pipefd[0], STDIN_FILENO);
	//	execCmd(firstArgs);
	//}
	//else
	//{
	//	wait(&p_id);
	//	close(STDOUT_FILENO);
	//	close(pipefd[0]);
	//	dup2(pipefd[1], STDOUT_FILENO);
	//	execCmd(secondArgs);
	//}
}
